********************************************************************************************************************************************************************************
----------------------
Inside Form.tsx:-
----------------------

div.mb-3>label.form-label+input.form-control			(Hit Enter)						(mb3 means  margin botton 3)
-------------------------------------------------

<div className="mb-3">
  <label htmlFor="" className="form-label"></label>
  <input type="text" className="form-control" />
</div>


div.mb-3>label.form-label+input[type=number].form-control
-------------------------------------------------------------
<div className="mb-3">
  <label htmlFor="age" className="form-label"></label>
  <input id="age" type="number" className="form-control" />
</div>	


button.btn.btn-primary
---------------------------------------
<button className="btn btn-primary" type="submit">Submit</button>


---------------------------
Inside components/Form.tsx:-
---------------------------
import React, { FormEvent } from "react";

const Form = () => {
 
  return (
    <form>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input id="name" type="text" className="form-control" />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input id="age" type="number" className="form-control" />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;





src
    index.css			(All global styles here)	(import index.css in main.tsx)



----------------------
index.css
---------------------
body{
  padding:20px;
}



********************************************************************************************************************************************************************************

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
------------------------
Form.tsx:-
------------------------
const Form = () => {
  return (
    <form onSubmit={() => console.log("Submitted")}>           //But, when we submit, the message on the console is disappeared. When we submit HTML form,because form is posted to the server, so we get
      <div className="mb-3">				       //full page reload.
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input id="name" type="text" className="form-control" />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input id="age" type="number" className="form-control" />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;



------------------------
App.tsx:-
------------------------
import ExpendableText from "./components/ExpandableText";
import Form from "./components/Form";
import "bootstrap/dist/css/bootstrap.css";

function App() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-----------------
Form.tsx:-
-----------------

const Form = () => {
  return (
    <form
      onSubmit={(event) => {							//It will prevent form being submit to the server. Now, we can see on the console.
        event.preventDefault(), console.log("Submitted");
      }}
    >
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input id="name" type="text" className="form-control" />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input id="age" type="number" className="form-control" />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
--------------------------
Form.tsx:-
-------------------------
import { FormEvent } from "react";

const Form = () => {
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault(), console.log("Submitted");
  };
  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input id="name" type="text" className="form-control" />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input id="age" type="number" className="form-control" />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;


------------------------
App.tsx:-
------------------------
import ExpendableText from "./components/ExpandableText";
import Form from "./components/Form";
import "bootstrap/dist/css/bootstrap.css";

function App() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App;





>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

*************************************************************************************CONTROLLED COMPONENTS*****************************************************************************

All input fields have a change event that is triggered every time when a user types a key stroke. With the help of this event, we can update property of person object below that we are going to add in our code. 
  const [person, setPerson] = useState({
    name: "",
    age: 0,
  });


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
-------------------
App.tsx:-
-------------------
import React, { FormEvent, useState } from "react";

const Form = () => {
  const [person, setPerson] = useState({
    name: "",
    age: 0,
  });
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault(), console.log("Submitted");
    console.log(person);
  };
  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, name: event.target.value })
          }
          id="name"
          type="text"
          className="form-control"
        />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, age: parseInt(event.target.value) })
          }
          id="age"
          type="number"
          className="form-control"
        />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;




------------------------
App.tsx:-
------------------------
import ExpendableText from "./components/ExpandableText";
import Form from "./components/Form";

function App() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

We have a tiny problem in our code. All input fields in an html form have a value property for maintainig their own state. In our code, we also have state variable person. So, it is possible that these sources got out of sync. So, we should make react the single source of   truth.

<input value={person.name}..../>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-------------------------
Form.tsx:-
-------------------------

import React, { FormEvent, useState } from "react";

const Form = () => {
  const [person, setPerson] = useState({
    name: "",
    age: "",
  });
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault(), console.log("Submitted");
    console.log(person);
  };
  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input								
          onChange={(event) =>
            setPerson({ ...person, name: event.target.value })
          }
          value={person.name}			//Now, it is controlled component, because its state is entirely controlled by React	(Because of value={person.name} and stateHook)
          id="name"				//The value of input field is not managed by Dom but instead stored and updated by component state. 
          type="text"
          className="form-control"
        />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, age: parseInt(event.target.value) })
          }
          value={person.age}			//Now, it is controlled component, because its state is entirely controlled by React	(Because of value={person.name})
          id="age"				//The value of input field is not managed by Dom but instead stored and updated by component state. 
          type="number"
          className="form-control"
        />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;


--------------------------
App.tsx:-
--------------------------
import ExpendableText from "./components/ExpandableText";
import Form from "./components/Form";

function App() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


*****************************************************************************MANAGING FORMS WITH REACT HOOK FORM**************************************************************************

As the form becomes more complex, managing the form state with the state hook becomes time consuming and error prone. 

npm i react-hook-form@7.43			(With the help of react-hook-form, we can build Form with less code)


It provides bunch of properties and methods. 

---------------------
In Form.tsx:-
---------------------
import React, { FormEvent, useState } from "react";
import { useForm } from "react-hook-form";

const Form = () => {

	 const form = useForm();			//You can see the form object on the console. And can see all the properties and functions in this object. 
  	 console.log(form);

..
..


We can destructure this Object---
---------------------
In Form.tsx:-
---------------------
import React, { FormEvent, useState } from "react";
import { useForm } from "react-hook-form";

const Form = () => {

	 const {register} = useForm();			
  	 console.log(register('name'));			//We can pass name of input field. (It can be register('age'))

..
..



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
We don't need stateHook person object. So delete it. 


-------------------
Form.tsx:-
-------------------
import React, { FormEvent, useState } from "react";
import { FieldValues, useForm } from "react-hook-form";

const Form = () => {
  const { register, handleSubmit } = useForm();				//register and handleSubmit are the properties from React-Hook-Form
  const onSubmit = (data: FieldValues) => console.log(data);

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div className="mb-3">
        <label htmlFor="name" className="form-label">
          Name
        </label>
        <input
          {...register("name")}						//It will provide many properties along with value 
          id="name"
          type="text"
          className="form-control"
        />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          {...register("age")}
          id="age"
          type="number"
          className="form-control"
        />
      </div>
      <button className="btn btn-primary" type="submit">
        Submit
      </button>
    </form>
  );
};

export default Form;


-------------------
App.tsx:-
--------------------
import ExpendableText from "./components/ExpandableText";
import Form from "./components/Form";

function App() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App;













>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

***********************************************************************************************THE END**************************************************************************
















