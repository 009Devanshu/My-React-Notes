****************************************************Setting Up the Project****************************************

npm create vite@4.1.0
  Project-Name: game-hub
  Select Framework--> React
  Select a Variant--> Typescript
  
cd into this folder-->
  npm i

And then --> 
  npm run dev
  
Git-->
  git init
  git add .
  git commit -m "Initial-Commit"
  

****************************************************Installing Chakra UI****************************************

chakra-ui.com >>> get-started >>> vite
Copy and Paste Installation Instruction
See Instruction for Provider Setup

Components>> Search Button
Copy this line ---> import { Button, ButtonGroup } from '@chakra-ui/react'
Copy this line ---> <Button colorScheme='blue'>Button</Button>

Delete Content from index.css---> 


---------------------
Main.tsx:-
---------------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider } from "@chakra-ui/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider>
      <App />
    </ChakraProvider>
  </React.StrictMode>
);


------------------------
App.tsx:-
------------------------
import { Button, ButtonGroup } from "@chakra-ui/react";
function App() {
  return <Button colorScheme="blue">Button</Button>;
}

export default App;

**********************************************Creating a Responsive Layout******************************************

We are going to use Grind Components of Chakra. Grid components in Chakra are similar to html grid. 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
------------------
Main.tsx:-
------------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider } from "@chakra-ui/react";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider>
      <App />
    </ChakraProvider>
  </React.StrictMode>
);


--------------------
App.tsx:-
--------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
function App() {
  return (
    <Grid
      templateAreas={'"nav nav" "aside main"'}
    >
      <GridItem area="nav" bg="coral">
        Nav
      </GridItem>

      <GridItem area="aside" bg="gold">
        Aside
      </GridItem>

      <GridItem area="main" bg="dodgerblue">
        Main
      </GridItem>
    </Grid>
  );
}

export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-------------------
App.tsx:-
-------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,	       //For Mobile Devices
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav" bg="coral">
        Nav
      </GridItem>

      <GridItem area="aside" bg="gold">
        Aside
      </GridItem>

      <GridItem area="main" bg="dodgerblue">
        Main
      </GridItem>
    </Grid>
  );
}

export default App;


--------------------------
We can see this layout on our laptop screen (It will be 1024 pixel)
To See how It would look like in mobile screen ---> In the browser, Go to Inspect Mode, Click on mobile devices. And you can play with that. 
We can see that aside panel is also rendered on mobile devices. To fix this, Below is the modified code ----> 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-----------------
App.tsx:-
-----------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than or equal to 1024 pixels
      }}
    >
      <GridItem area="nav" bg="coral">
        Nav
      </GridItem>
      <Show above="lg">				//For Screens equal or larger than large screen. 
        <GridItem area="aside" bg="gold">
          Aside
        </GridItem>
      </Show>

      <GridItem area="main" bg="dodgerblue">
        Main
      </GridItem>
    </Grid>
  );
}

export default App;

------------------------------------

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

**********************************************Building the Navigation Bar******************************************


components
  NavBar.tsx
  
-------------
NavBar.tsx:-
-------------
import React from "react";

const NavBar = () => {
  return <div>NavBar</div>;
};

export default NavBar;


-----------------------------------
In this component, we will layout our items horizontally. For this we will use a component, HStack (Horizontal Statck). It is from ChakraUI. 
Copy paste webp logo into assets folder. 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

---------------------
NavBar.tsx:-
---------------------
import { HStack, Image, Text } from "@chakra-ui/react";
import logo from "../assets/logo.webp";

const NavBar = () => {
  return (
    <HStack>
      <Image src={logo} boxSize="60px"/>
      <Text>Nav Bar</Text>
    </HStack>
  );
};

export default NavBar;

-------------------
App.tsx:-
-------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav" bg="coral">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" bg="gold">
          Aside
        </GridItem>
      </Show>

      <GridItem area="main" bg="dodgerblue">
        Main
      </GridItem>
    </Grid>
  );
}

export default App;

------------------------------------
 To decrease the size of logo, we used boxSize.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

****************************************************Implementing The Dark Mode***************************************

Search in Chakra ---> Color Mode (You can learn everything)

src
  theme.ts
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
----------------------
NavBar.tsx:-
----------------------
import { HStack, Image, Text } from "@chakra-ui/react";
import logo from "../assets/react.svg";

const NavBar = () => {
  return (
    <HStack>
      <Image src={logo} boxSize="60px" />
      <Text>Nav Bar</Text>
    </HStack>
  );
};

export default NavBar;

-----------------------
theme.ts:-
-----------------------
import { extendTheme,ThemeConfig } from "@chakra-ui/react";

const config:ThemeConfig={
    initialColorMode:'dark'
}

const theme = extendTheme({config});

export default theme;

----------------------
App.tsx:-
----------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" bg="gold">
          Aside
        </GridItem>
      </Show>

      <GridItem area="main" bg="dodgerblue">
        Main
      </GridItem>
    </Grid>
  );
}

export default App;

-------------------------
Main.tsx:-
-------------------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider, ColorModeScript } from "@chakra-ui/react";
import App from "./App";
import theme from "./theme";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider theme={theme}>
      <ColorModeScript initialColorMode={theme.config.initialColorMode} />
      <App />
    </ChakraProvider>
  </React.StrictMode>
);

-------------------------------
Dark Color Mode will not be visible when you see on browser. For this, Do this----> 
Inspect Mode >>> Storage >>> Local Storage >>> Delete Light Mode >>> Now, Refresh the browser

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

*************************************************Building the Color Mode Switch***********************************

components
  ColorModeSwitch.tsx
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

--------------------------
ColorModeSwitch.tsx:-
--------------------------
import { HStack, Switch, Text, useColorMode } from "@chakra-ui/react";
import React from "react";

const ColorModeSwitch = () => {
  const { toggleColorMode, colorMode } = useColorMode(); //colorMode represents current Mode
  return (
    <HStack>
      <Switch
        colorScheme="green"
        isChecked={colorMode === "dark"}
        onChange={toggleColorMode}
      />
      <Text>Dark Mode</Text>
    </HStack>
  );
};

export default ColorModeSwitch;

-----------------------------
theme.ts
-----------------------------
import { extendTheme,ThemeConfig } from "@chakra-ui/react";

const config:ThemeConfig={
    initialColorMode:'dark'
}

const theme = extendTheme({config});

export default theme;

---------------------------
NavBar.tsx:-
---------------------------
import { HStack, Image } from "@chakra-ui/react";
import logo from "../assets/react.svg";
import ColorModeSwitch from "./ColorModeSwitch";

const NavBar = () => {
  return (
    <HStack justifyContent="space-between" padding="10px">
      <Image src={logo} boxSize="60px" />
      <ColorModeSwitch />
    </HStack>
  );
};

export default NavBar;

------------------------
Main.tsx:-
------------------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider, ColorModeScript } from "@chakra-ui/react";
import App from "./App";
import theme from "./theme";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider theme={theme}>
      <ColorModeScript initialColorMode={theme.config.initialColorMode} />
      <App />
    </ChakraProvider>
  </React.StrictMode>
);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

********************************************************Fetching the Games*******************************************

Fetching games from rawg.io api. 
	Get An API Key. 


nmp i axios

src
  services
    api-client.ts
    
src
  components
    GameGrid.tsx
    
 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

--------------------
api-client.tsx:-
--------------------
import axios from "axios";

export default axios.create({
    baseURL:'https://api.rawg.io/api',
    params:{    
        key:'3e92c52f336548d8a74e0398c0183b8f'
    }
})

----------------------
GameGrid.tsx:-
----------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { Text } from "@chakra-ui/react";

interface Game {
  id: number;
  name: string;
}

interface FetchGamesResponse {
  count: number;
  results: Game[];
}

const GameGrid = () => {
  const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    apiClient
      .get<FetchGamesResponse>("/games")
      .then((res) => setGames(res.data.results))
      .catch((err) => setError(err.message));
  });
  return (
    <>
      {error && <Text>{error}</Text>}
      <ul>
        {games.map((game) => (
          <li key={game.id}>{game.name}</li>
        ))}
      </ul>
    </>
  );
};

export default GameGrid;

---------------------
App.tsx:-
---------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside">Aside</GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;


--------------------
...
...

And Other files
--------------------

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


**************************************Creating A Custom Hook For Fetching Games******************************************

src 
  hooks		             (folder)
    useGames.ts

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
---------------------
api-client.ts
---------------------
import axios from "axios";

export default axios.create({
    baseURL:'https://api.rawg.io/api',
    params:{    
        key:'3e92c52f336548d8a74e0398c0183b8f'
    }
})

--------------------
GameGrid.tsx:-
--------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";

const GameGrid = () => {
  const { games, error } = useGames();
  return (
    <>
      {error && <Text>{error}</Text>}
      <ul>
        {games.map((game) => (
          <li key={game.id}>{game.name}</li>
        ))}
      </ul>
    </>
  );
};

export default GameGrid;

------------------
App.tsx:-
------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside">Aside</GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;

-------------------
NavBar.tsx:-
-------------------
import { HStack, Image } from "@chakra-ui/react";
import logo from "../assets/react.svg";
import ColorModeSwitch from "./ColorModeSwitch";

const NavBar = () => {
  return (
    <HStack justifyContent="space-between" padding="10px">
      <Image src={logo} boxSize="60px" />
      <ColorModeSwitch />
    </HStack>
  );
};

export default NavBar;

-----------------
useGames.ts:-
-----------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

interface Game {
    id: number;
    name: string;
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    const controller = new AbortController();
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => setGames(res.data.results))
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
        });
      return ()=>controller.abort();
  },[]);
  return {games,error};
}

export default useGames;

-----------------------
Main.tsx:-
-----------------------
import React from "react";
import ReactDOM from "react-dom/client";
import { ChakraProvider, ColorModeScript } from "@chakra-ui/react";
import App from "./App";
import theme from "./theme";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider theme={theme}>
      <ColorModeScript initialColorMode={theme.config.initialColorMode} />
      <App />
    </ChakraProvider>
  </React.StrictMode>
);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


*********************************************************THE END*******************************************************










