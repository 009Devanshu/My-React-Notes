************************************************************************************UNDERSTANDING THE STATE HOOK*********************************************************************************

-----------------------------------------------------------------------------
React updates STATE asynchronously.	(Update not applied immediately)
-----------------------------------------------------------------------------
Example:-
------------

function App(){
	const [isVisible, setVisibility] = useState(false);
	
	const handleClick = () =>{
		setVisibility(true);
		console.log(isVisible);		//Its value is still false. That means value of isVisible is still false even after (setVisibility(true)); It means React updated state later)
	};					//That means If we update many states in this event handler. It will not be applied immediately. If it happens, there will be re-rendering again and 
						//again. So, instead of re-rendering again and again. React batches all these updates and apply all the updates at once and re-render our 
	return (				//components with updated states. 
		<div>
			<button onClick = {handleClick}>Show</button>
		</div>
	);
} 


----------------------------------------------------------------------------
State is stored outside of Components 
-----------------------------------------------------------------------------
What does it mean?

Let's take an example-->

function App(){

	const [isVisible, setVisibility] = useState(false);
	let c = 0;				//New Line
	const handleClick = () =>{
		setVisibility(true);
		c++;				//New Line
		console.log(isVisible);		
	};					
						
	return (				
		<div>
			<button onClick = {handleClick}>Show</button>
		</div>
	);
} 

The problem with scoped variable is that when function is executed completely, local variable is going to be removed from the memory. React when re-render this component, call App function again and initialize local variable (c) again. So, the update that we applied (c++) will be lost. That's why, we use stateHook to store states outside the components. So, somewhere, React is going to store the states for this component. And it will automatically remove those variables when this component is no longer visible on the screen.
And this reason brings the third point--->



----------------------------------------------------------------------------
Use Hooks at the top level of your component
-----------------------------------------------------------------------------


function App(){

	//[false,true]						//React maintains an array like this. And values are stored in ordered. So, using hooks in the middle, in if-else or for. It will impact 
	const [isVisible, setVisibility] = useState(false);	//this order.
	const [isApproved,setApproved] = useState(true);		
	const handleClick = () =>{
		setVisibility(true);
		console.log(isVisible);		
	};					
						
	return (				
		<div>
			<button onClick = {handleClick}>Show</button>
		</div>
	);
} 


************************************************************************************CHOOSING THE STATE STRUCTURE*********************************************************************************

---------------------------------------------------------
Avoid Redundant State Variables--->
----------------------------------------------------------

function App(){

	//[false,true]						
	const [firstName, setFirstName] = useState('');	
	const [lastName,setLastName] = useState('');
	const fullName = firstName +" "+lastName;			//That, means we don't need to declare another stateHook for fullName. 			
	return (				
		<div>
			{fullName}
		</div>
	);
} 



-------------------------------------------------------------------------------------
Group Related Variables inside an Object--->	(But avoid deeply nested objects)
-------------------------------------------------------------------------------------
function App(){

	//[false,true]						
	const [firstName, setFirstName] = useState('');	
	const [lastName,setLastName] = useState('');
	const [isLoading,setLoading] = useState(false);		 //We need data from server. First two properties are different from this property. First two states are related to a person.
	return (				
		<div>
			{fullName}
		</div>
	);
} 


So, it is better to keep these states inside a person object. 

function App(){

	const [person,setPerson] = useState({
		firstName:'',
		lastName:''	
	});
	const [isLoading,setLoading] = useState(false);		 
	return (				
		<div>
			{fullName}
		</div>
	);
} 


But, we should not use deeply nested structure like below.--->

const [person,setPerson] = useState({
		firstName:'',
		lastName:'',
		contact:{
			address:{
				street:''
			}
		}	
	});


************************************************************************************Exercise: Updating State*********************************************************************************
(See PDF)		(Everythins is explained there in fantastic way)



function App(){
	const [game,setGame] = useState({
		id:1,
		player:{
			name:"John",
		},
	});
	
	const handleClick = () =>{
		game.player.name='bob';
	
	}
	..
	..
}
But, This is not a good way.

	
Better Way:-
-----------------------

const [game,setGame] = useState({
		id:1,
		player:{
			name:"John",
		},
	});
	
	
	setGame({
		...game,
		player:{...game.player,name:"Bob"},
	});
	
	

---------------------------------------------------
Adding in Arrays
---------------------------------------------------

const[pizza,setPizza] = useState({
	
	name:'Spicy Pepperoni',
	toppings:['Mushroom']
});


//OneWay
pizza.toppings.push("Cheese");


//Updating toppings
setPizza({
	...pizza,
	toppings:[...pizza.toppings, "cheese"]
})




----------------------------------------------

-----------------------------------------------

const [cart,setCart] = useState({
	discount:.1,
	items:[
	  {id:1,title:'product 1',quantity:1},
	  {id:2,title:'product 2',quantity:1}
	]
});


//Update quantity to 2 for id:1
setCart({
	...cart,
	items:cart.items.map(item=>item.id===1?{...item,quantity:item.quantity+1}:item)
})



************************************************************************************Understanding the Strict Mode*********************************************************************************


You can see strict mode in main.tsx:--
-----------------------------------------
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


StrinctMode catches potential problems. One of the potential problem is impure component-->
Message.tsx:-
------------
let count=0;

const Message = ()=>{
	count++;
	return <div>Message {count}</div>;	
};
export default Message;


App.tsx:-
------------
import Message from './components/Message';

function App(){
	return (
		<div>
			<Message/>	
			<Message/>
			<Message/>		
		</div>
	);
}
export default App;



So, when the strict mode is enabled, each component is rendered twice (Since the component is impure). And takes the result from second render. First render is used to catch potential issues with the code. Second render is actually used to update the user interface. 


<Message/>	Message1
		Message2
		
<Message/>	Message3
		Message4
		
<Message/>	Message5
		Message6



************************************************************************************Updating Array Of Objects*********************************************************************************


PDF	

************************************************************************************Updating Arrays*********************************************************************************

PDF

************************************************************************************Simplifying Update Logic with Immer***********************************************************************

Immer makes update easy.

npm i immer@9.0.19


const [bugs,setBugs] = useState([
		{id:1,title:'Bug 1',fixed:false},
		{id:2,title:'Bug 2',fixed:false},
	]
)


///Update with Immer
const handleClick = ()=>{
	setBugs(produce(draft=>{
		const  bug = draft.find(draft=>draft.if===1);
		if (bug) bug.fixed=true;	
	}))	
};


Imagice draft is the copy of the bugs array. We can go in this object and we can make any changes. 






components
	App.tsx:-
	---------
	
App.tsx:-
-------------
import { useState } from "react";
import Button from "./components/Button/Button";
import produce from "immer";

function App() {
  const [bugs, setBugs] = useState([
    { id: 1, title: "Bug 1", fixed: false },
    { id: 2, title: "Bug 2", fixed: false },
  ]);

  ///Update with Immer
  const handleClick = () => {
    setBugs(
      produce((draft) => {
        const bug = draft.find((draft) => draft.id === 1);
        if (bug) bug.fixed = true;
      })
    );
  };
  return (
    <div>
      {bugs.map((bug) => (
        <p key={bug.id}>
          {bug.title} {bug.fixed ? "fixed" : "new"}
        </p>
      ))}
      <Button onClick={handleClick}>Click Me</Button>
    </div>
  );
}

export default App;






components
	Button
		Button.tsx
	
	
		
Button.tsx:-
-------------------
import styles from "./Button.module.css";

interface Props {
  children: string;
  color?: "primary" | "secondary" | "danger";
  onClick: () => void;
}

const Button = ({ children, onClick, color = "primary" }: Props) => {
  return (
    <button
      className={[styles.btn, styles["btn-" + color]].join(" ")}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default Button;


************************************************************************************Updating Nested Objects***********************************************************************

PDF	(Very Easy)


************************************************************************************Keeping Components Pure***********************************************************************

PDF

This is for performace reason. If the inputs (props) of a component have not changed, react can skip re-rendering that component.  

To keep our components pure, we should avoid making changes during the render phase.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Message.tsx:-
----------------------
let count = 0;

const Message = () => {
  return <div>Message {count}</div>;
};
export default Message;



App.tsx:-
-----------------------
import Message from "./components/Message";

function App() {
  return (
    <>
      <Message />
      <Message />
      <Message />
    </>
  );
}
export default App;


On User Interface---->
------------------------
Message 0
Message 0
Message 0



That was the example of pure component. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Message.tsx:-
---------------------
let count = 0;

const Message = () => {
  count++;
  return <div>Message {count}</div>;
};
export default Message;


App.tsx:-
----------------------
import Message from "./components/Message";

function App() {
  return (
    <>
      <Message />
      <Message />
      <Message />
    </>
  );
}
export default App;



On User Interface---->
------------------------
Message 2
Message 4
Message 6



This is the example of impure component. We should not change any object that exists before render phase. (like let count=0)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



But, it is totally fine to update an object that we create as part of rendering.  

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Message.tsx
-------------------
const Message = () => {
  let count = 0;
  count++;
  return <div>Message {count}</div>;
};
export default Message;



App.tsx:-
---------------------
import Message from "./components/Message";

function App() {
  return (
    <>
      <Message />
      <Message />
      <Message />
    </>
  );
}
export default App;


On User Interface---->
-----------------------
Message 1
Message 1
Message 1

((But, Still (I saw on chatgpt) it is not a pure component because, For a component to be pure, it should rely only on its props and state for rendering))
************************************************************************************Sharing State Between Components***********************************************************************

Some times we need to share state between components. Let's imaginve we are going to build an e-commerce application. 
Typically, we have navigation bar on the top, where we can see the total number of items in the shopping cart. And Below the navBar, we have shopping cart component. 
As the user updates or removes items from the shoppingCart, the number of items in the navigation bar should be updated in real time. 
So, these two components need to share state and in sync. 




How can we do it?
----------------------------
Component tree--> 
On the top, we have the App component. 
Below, the App component, we have NavBar and Cart component. (Child components of App component)

Let's imagine, we have used the state hook in Cart component to store the list of shopping Cart items.
To share the state with Nav bar component, we should lift the state up to the closest parent component (App component in this case) and then, we can share this state with its children using props. 




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




components
	NavBar.tsx
	Cart.tsx
	
----------------------------
NavBar.tsx:-
----------------------------
import React from "react";

interface Props {
  cartItemsCount: number;
}
const NavBar = ({ cartItemsCount }: Props) => {
  return <div>NavBar: {cartItemsCount}</div>;
};

export default NavBar;


----------------------------
Cart.tsx:-
----------------------------
import React from "react";

interface Props {
  cartItems: string[];
}

const Cart = ({ cartItems }: Props) => {
  return (
    <>
      <div>Cart</div>
      <ul>
        {cartItems.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
    </>
  );
};

export default Cart;



----------------------------
App.tsx:-
----------------------------
import { useState } from "react";
import NavBar from "./components/NavBar";
import Cart from "./components/Cart";

function App() {
  const [cartItems, setCartItems] = useState(["Product1", "Product2"]);   //In real world application, instead of passing Strings,  we will pass real Product objects with id and other properties. 
  return (
    <div>
      <NavBar cartItemsCount={cartItems.length} />
      <Cart cartItems={cartItems} />
    </div>
  );
}
export default App;



(Till now, a simple application)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>





--------------------------
Cart.tsx:-
--------------------------
import React from "react";

interface Props {
  cartItems: string[];
}

const Cart = ({ cartItems }: Props) => {
  return (
    <>
      <div>Cart</div>
      <ul>
        {cartItems.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
      <button onClick={}>Clear</button>		
    </>
  );
};

export default Cart;

As, we know we should treat the props as immutable and read only in a component. We are not going to modify cartItems prop in the Cart component. Instead we need to notify to the App component that user clicked on the clear button, so all the changes to the state should be done inside App component. 
So, as a rule of thump, the component that holds the state is the one responsible for updating it. Here, App component holds the state, so, App component is responsible to change the state. 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

-----------------
NavBar.tsx:-
-----------------
import React from "react";

interface Props {
  cartItemsCount: number;
}
const NavBar = ({ cartItemsCount }: Props) => {
  return <div>NavBar: {cartItemsCount}</div>;
};

export default NavBar;



-------------------
Cart.tsx:-
-------------------
import React from "react";

interface Props {
  cartItems: string[];
  onClear: () => void;
}

const Cart = ({ cartItems, onClear }: Props) => {
  return (
    <>
      <div>Cart</div>
      <ul>
        {cartItems.map((item) => (
          <li key={item}>{item}</li>
        ))}
      </ul>
      <button onClick={onClear}>Clear</button>
    </>
  );
};

export default Cart;

---------------------
App.tsx:-
---------------------
import { useState } from "react";
import NavBar from "./components/NavBar";
import Cart from "./components/Cart";

function App() {
  const [cartItems, setCartItems] = useState(["Product1", "Product2"]);
  return (
    <div>
      <NavBar cartItemsCount={cartItems.length} />
      <Cart cartItems={cartItems} onClear={() => setCartItems([])} />
    </div>
  );
}
export default App;






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



************************************************************************************Updating Objects***********************************************************************

PDF
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
------------------
Button.tsx:-
------------------
import styles from "./Button.module.css";

interface Props {
  children: string;
  color?: "primary" | "secondary" | "danger";
  onClick: () => void;
}

const Button = ({ children, onClick, color = "primary" }: Props) => {
  return (
    <button
      className={[styles.btn, styles["btn-" + color]].join(" ")}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default Button;




------------------
App.tsx:-
------------------
import { useState } from "react";
import NavBar from "./components/NavBar";
import Cart from "./components/Cart";
import Button from "./components/Button/Button";

function App() {
  const [drink, setDrink] = useState({
    title: "Americano",
    price: 5,
  });
  const handleClick = () => {
    drink.price = 6;			//This is not
    setDrink(drink);			//going to work
  };
  return (
    <div>
      {drink.price}
      <Button onClick={handleClick}>Click</Button>
    </div>
  );
}
export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

To tell to React about State update. We have to give React a brand new object. 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
----------------------
Button.tsx:-
----------------------
import styles from "./Button.module.css";

interface Props {
  children: string;
  color?: "primary" | "secondary" | "danger";
  onClick: () => void;
}

const Button = ({ children, onClick, color = "primary" }: Props) => {
  return (
    <button
      className={[styles.btn, styles["btn-" + color]].join(" ")}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default Button;

----------------------
App.tsx:-
-----------------------
import { useState } from "react";
import NavBar from "./components/NavBar";
import Cart from "./components/Cart";
import Button from "./components/Button/Button";

function App() {
  const [drink, setDrink] = useState({
    title: "Americano",
    price: 5,
  });
  const handleClick = () => {
    setDrink({ ...drink, price: 6 });
  };
  return (
    <div>
      {drink.price}
      <Button onClick={handleClick}>Click</Button>
    </div>
  );
}
export default App;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

********************************************************************Exercise:Building an expendable text Component***********************************************************************

--------------------------------
Expandable.tsx:-
--------------------------------

import React, { Children, ReactNode, useState } from "react";

interface Props {
  children: string;
  maxChars?: number;
}

const ExpendableText = ({ children, maxChars = 100 }: Props) => {
  const [isExpended, setExpended] = useState(false);
  if (children.length <= maxChars) return <p>{children}</p>;
  const text = isExpended ? children : children.substring(0, maxChars);
  return (
    <p>
      {text}...
      <button onClick={() => setExpended(!isExpended)}>
        {isExpended ? "Less" : "More"}
      </button>
    </p>
  );
};

export default ExpendableText;


--------------------------------
App.tsx:-
--------------------------------
import ExpendableText from "./components/ExpandableText";

function App() {
  return (
    <div>
      <ExpendableText>Hello World</ExpendableText>
    </div>
  );
}
export default App;




*****************************************************************************************THE END**********************************************************************************************































