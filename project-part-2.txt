************************************************Building Game Cards***********************************

components
  GameGrid.tsx
  GameCard.tsx

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

----------------
GameCard.tsx:-
----------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, Heading, Image } from "@chakra-ui/react";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card borderRadius={10} overflow={"hidden"}>
      <Image src={game.background_image} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
      </CardBody>
    </Card>
  );
};

export default GameCard;

------------------
GameGrid.tsx:-
------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { SimpleGrid, Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";
import GameCards from "./GameCard";
import GameCard from "./GameCard";

const GameGrid = () => {
  const { games, error } = useGames();
  return (
    <>
      {error && <Text>{error}</Text>}
      <SimpleGrid
        columns={{ sm: 1, md: 2, lg: 3, xl: 5 }}
        padding="10px"
        spacing={10}
      >
        {games.map((game) => (
          <GameCard key={game.id} game={game} />
        ))}
      </SimpleGrid>
    </>
  );
};

export default GameGrid;

-------------------
useGames.ts:-
-------------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Game {
    id: number;
    name: string;
    background_image:string;
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    const controller = new AbortController();
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => setGames(res.data.results))
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
        });
      return ()=>controller.abort();
  },[]);
  return {games,error};
}

export default useGames;

---------------
App.tsx:-
---------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside">Aside</GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

************************************************"Displaying Platform Icons***********************************

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

------------------
useGames.ts:-
------------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[]
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    const controller = new AbortController();
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => setGames(res.data.results))
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
        });
      return ()=>controller.abort();
  },[]);
  return {games,error};
}

export default useGames;

------------------
GameCard.tsx:-
------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, Heading, Image, Text } from "@chakra-ui/react";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card borderRadius={10} overflow={"hidden"}>
      <Image src={game.background_image} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        {game.parent_platforms.map(({ platform }) => (
          <Text>{platform.name}</Text>
        ))}
      </CardBody>
    </Card>
  );
};

export default GameCard;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

For Icons---> 
npm i react-icons@4.7.1

components
  PlatformIconList.tsx
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-------------------
GameCard.tsx:-
-------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, Heading, Image, Text } from "@chakra-ui/react";
import PlatformIconList from "./PlatformIconList";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card borderRadius={10} overflow={"hidden"}>
      <Image src={game.background_image} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        <PlatformIconList
          platforms={game.parent_platforms.map((p) => p.platform)}
        />
      </CardBody>
    </Card>
  );
};

export default GameCard;

---------------------------
PlatformIconList.tsx:-
---------------------------
import {
  FaWindows,
  FaPlaystation,
  FaXbox,
  FaApple,
  FaLinux,
  FaAndroid,
} from "react-icons/fa";
import { MdPhoneIphone } from "react-icons/md";
import { SiNintendo } from "react-icons/si";
import { BsGlobe } from "react-icons/bs";
import { HStack, Icon, Text } from "@chakra-ui/react";
import { Platform } from "../hooks/useGames";
import { IconType } from "react-icons";

interface Props {
  platforms: Platform[];
}
const PlatformIconList = ({ platforms }: Props) => {
  const iconMap: { [key: string]: IconType } = {
    pc: FaWindows,
    playstation: FaPlaystation,
    xbox: FaXbox,
    nintendo: SiNintendo,
    mac: FaApple,
    linux: FaLinux,
    android: FaAndroid,
    ios: MdPhoneIphone,
    web: BsGlobe,
  };
  return (
    <HStack marginY={1}>
      {platforms.map((platform) => (
        <Icon as={iconMap[platform.slug]} color="gray.500" />
      ))}
    </HStack>
  );
};

export default PlatformIconList;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

********************************************Displaying Critic Score******************************************

components
  CriticScore.tsx
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-------------------
CriticScore.tsx:-
-------------------
import { Badge } from "@chakra-ui/react";
import React from "react";

interface Props {
  score: number;
}

const CriticScore = ({ score }: Props) => {
  let color = score > 75 ? "green" : score > 60 ? "yello" : "";
  return (
    <Badge colorScheme={color} fontSize="14px" paddingX={2} borderRadius="4px">
      {score}
    </Badge>
  );
};

export default CriticScore;

--------------------
useGames.ts:-
--------------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  useEffect(() => {
    const controller = new AbortController();
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => setGames(res.data.results))
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
        });
      return ()=>controller.abort();
  },[]);
  return {games,error};
}

export default useGames;

-------------------
GameCard.tsx:-
-------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, HStack, Heading, Image, Text } from "@chakra-ui/react";
import PlatformIconList from "./PlatformIconList";
import CriticScore from "./CriticScore";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card borderRadius={10} overflow={"hidden"}>
      <Image src={game.background_image} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        <HStack justifyContent="space-between">
          <PlatformIconList
            platforms={game.parent_platforms.map((p) => p.platform)}
          />
          <CriticScore score={game.metacritic}></CriticScore>
        </HStack>
      </CardBody>
    </Card>
  );
};

export default GameCard;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


********************************************Getting Optimized Images******************************************

The images that we get are big, If internet connection is slow, it will take long time to load the page. 
To render optimized images, we need to modify image url and insert crop parameter. 

For example ---> 
https://media.rawg.io/media/games/20a/20aa03a10cda45239fe22d035c0ebe64.jpg

==> https://media.rawg.io/media/crop/600/400/games/20a/20aa03a10cda45239fe22d035c0ebe64.jpg

services
  image-url.ts
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

------------------
image-url.ts:-
------------------

const getCroppedImageUrl = (url:string)=>{
    const target = 'media/';
    const index = url.indexOf(target) + 'media/'.length;
    return url.slice(0,index) + 'crop/600/400/'+url.slice(index);
}
export default getCroppedImageUrl;

---------------------
GameCard.tsx:-
---------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, HStack, Heading, Image, Text } from "@chakra-ui/react";
import PlatformIconList from "./PlatformIconList";
import CriticScore from "./CriticScore";
import getCroppedImageUrl from "../services/image-url";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card borderRadius={10} overflow={"hidden"}>
      <Image src={getCroppedImageUrl(game.background_image)} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        <HStack justifyContent="space-between">
          <PlatformIconList
            platforms={game.parent_platforms.map((p) => p.platform)}
          />
          <CriticScore score={game.metacritic}></CriticScore>
        </HStack>
      </CardBody>
    </Card>
  );
};

export default GameCard;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

****************************Improving User Experience With Loading Skeletons*********************************


components
  GameCardSkeleton.tsx
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

----------------------
GameCardSkeleton.tsx
----------------------
import { Card, CardBody, Skeleton, SkeletonText } from "@chakra-ui/react";
import React from "react";

const GameCardSkeleton = () => {
  return (
    <Card width="300px" borderRadius={10} overflow={"hidden"}>
      <Skeleton height="200px" />
      <CardBody>
        <SkeletonText />
      </CardBody>
    </Card>
  );
};

export default GameCardSkeleton;

---------------------
useGames.ts
---------------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => {
        setGames(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {games,error,isLoading};
}

export default useGames;

---------------------
GameGrid.tsx
---------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { SimpleGrid, Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";
import GameCards from "./GameCard";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";

const GameGrid = () => {
  const { games, error, isLoading } = useGames();
  const Skeletons = [1, 2, 3, 4, 5, 6];
  return (
    <>
      {error && <Text>{error}</Text>}
      <SimpleGrid
        columns={{ sm: 1, md: 2, lg: 3, xl: 5 }}
        padding="10px"
        spacing={10}
      >
        {isLoading &&
          Skeletons.map((skeleton) => <GameCardSkeleton key={skeleton} />)}
        {games.map((game) => (
          <GameCard key={game.id} game={game} />
        ))}
      </SimpleGrid>
    </>
  );
};

export default GameGrid;

-------------------
GameCard.tsx
-------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, HStack, Heading, Image, Text } from "@chakra-ui/react";
import PlatformIconList from "./PlatformIconList";
import CriticScore from "./CriticScore";
import getCroppedImageUrl from "../services/image-url";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card width="300px" borderRadius={10} overflow={"hidden"}>
      <Image src={getCroppedImageUrl(game.background_image)} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        <HStack justifyContent="space-between">
          <PlatformIconList
            platforms={game.parent_platforms.map((p) => p.platform)}
          />
          <CriticScore score={game.metacritic}></CriticScore>
        </HStack>
      </CardBody>
    </Card>
  );
};

export default GameCard;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


****************************************Refactor: Removing Duplicate Styles*********************************

components
  GameCardContainer
  

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

---------------------------
GameCardContainer.tsx:-
---------------------------
import { Box } from "@chakra-ui/react";
import React, { Children, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

const GameCardContainer = ({ children }: Props) => {
  return (
    <Box width="300px" borderRadius={10} overflow={"hidden"}>
      {children}
    </Box>
  );
};

export default GameCardContainer;


---------------------
GameCardSkeleton.tsx
---------------------
import { Card, CardBody, Skeleton, SkeletonText } from "@chakra-ui/react";
import React from "react";

const GameCardSkeleton = () => {
  return (
    <Card>
      <Skeleton height="200px" />
      <CardBody>
        <SkeletonText />
      </CardBody>
    </Card>
  );
};

export default GameCardSkeleton;

-------------------
GameCard.tsx
-------------------
import React from "react";
import { Game } from "../hooks/useGames";
import { Card, CardBody, HStack, Heading, Image, Text } from "@chakra-ui/react";
import PlatformIconList from "./PlatformIconList";
import CriticScore from "./CriticScore";
import getCroppedImageUrl from "../services/image-url";

interface Props {
  game: Game;
}

const GameCard = ({ game }: Props) => {
  return (
    <Card>
      <Image src={getCroppedImageUrl(game.background_image)} />
      <CardBody>
        <Heading fontSize="2xl">{game.name}</Heading>
        <HStack justifyContent="space-between">
          <PlatformIconList
            platforms={game.parent_platforms.map((p) => p.platform)}
          />
          <CriticScore score={game.metacritic}></CriticScore>
        </HStack>
      </CardBody>
    </Card>
  );
};

export default GameCard;

--------------------
GameGrid.tsx
--------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { SimpleGrid, Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";
import GameCards from "./GameCard";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";
import GameCardContainer from "./GameCardContainer";

const GameGrid = () => {
  const { games, error, isLoading } = useGames();
  const Skeletons = [1, 2, 3, 4, 5, 6];
  return (
    <>
      {error && <Text>{error}</Text>}
      <SimpleGrid
        columns={{ sm: 1, md: 2, lg: 3, xl: 5 }}
        padding="10px"
        spacing={10}
      >
        {isLoading &&
          Skeletons.map((skeleton) => (
            <GameCardContainer>
              <GameCardSkeleton key={skeleton} />
            </GameCardContainer>
          ))}
        {games.map((game) => (
          <GameCardContainer>
            <GameCard key={game.id} game={game} />
          </GameCardContainer>
        ))}
      </SimpleGrid>
    </>
  );
};

export default GameGrid;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

*****************************************************Fetching The Genres**********************************

rawg.io >> Go Documentation >> genres >> See Response

components
  GenreList.tsx
  
hooks
  useGenres.ts
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

--------------
useGenres.ts						(Copy Code from useGames.tx)
--------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

interface Genre{
    id:number;
    name:string;
}

interface FetchGenresResponse{
    count:number;
    results:Genre[]
}

const useGenres = ()=>{
    const [genres, setGenres] = useState<Genre[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchGenresResponse>("/genres",{signal:controller.signal})
      .then((res) => {
        setGenres(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {genres,error,isLoading};
}

export default useGenres;

----------------
GenreList.tsx
----------------
import React from "react";
import useGenres from "../hooks/useGenres";

const GenreList = () => {
  const { genres } = useGenres();
  return (
    <ul>
      {genres.map((genre) => (
        <li key={genre.id}>{genre.name}</li>
      ))}
    </ul>
  );
};

export default GenreList;

---------------
App.tsx
---------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

interface Genre{
    id:number;
    name:string;
}

interface FetchGenresResponse{
    count:number;
    results:Genre[]
}

const useGenres = ()=>{
    const [genres, setGenres] = useState<Genre[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchGenresResponse>("/genres",{signal:controller.signal})
      .then((res) => {
        setGenres(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {genres,error,isLoading};
}

export default useGenres;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


**************************************************Creating A Generic Data Fetching Hook**********************************

hooks 
  useData.ts
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

-----------------
useGenres.ts				//No change in this code
-----------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Genre{
    id:number;
    name:string;
}

interface FetchGenresResponse{
    count:number;
    results:Genre[]
}

const useGenres = ()=>{
    const [genres, setGenres] = useState<Genre[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchGenresResponse>("/genres",{signal:controller.signal})
      .then((res) => {
        setGenres(resimport { HStack, Switch, Text, useColorMode } from "@chakra-ui/react";
import React from "react";

const ColorModeSwitch = () => {
  const { toggleColorMode, colorMode } = useColorMode(); //colorMode represents current Mode
  return (
    <HStack>
      <Switch
        colorScheme="green"
        isChecked={colorMode === "dark"}
        onChange={toggleColorMode}
      />
      <Text>Dark Mode</Text>
    </HStack>
  );
};

export default ColorModeSwitch;
.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {genres,error,isLoading};
}

export default useGenres;

------------------
useData.ts
------------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
  interface FetchResponse<T> {
    count: number;
    results: T[];
  }

const useData = <T>(endpoint:string)=>{
    const [data, setData] = useState<T[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchResponse<T>>(endpoint,{signal:controller.signal})
      .then((res) => {
        setData(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {data,error,isLoading};
}

export default useData;

-------------------
GenreList.tsx
-------------------
import React from "react";
import useGenres, { Genre } from "../hooks/useGenres";
import useData from "../hooks/useData";

const GenreList = () => {
  const { data } = useData<Genre>("/genres");
  return (
    <ul>
      {data.map((genre) => (
        <li key={genre.id}>{genre.name}</li>
      ))}
    </ul>
  );
};

export default GenreList;

----------------
useGames.ts
----------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
  interface FetchGamesResponse {
    count: number;
    results: Game[];
  }

const useGames = ()=>{
    const [games, setGames] = useState<Game[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchGamesResponse>("/games",{signal:controller.signal})
      .then((res) => {
        setGames(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {games,error,isLoading};
}

export default useGames;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

src
  components
    ColorModeSwitch.tsx
    CriticScore.tsx
    GameCard.tsx
    GameCardContainer.tsx
    GameCardSkeleton.tsx
    GameGrid.tsx
    GenreList.tsx
    NavBar.tsx
    PlatformIconList.tsx
  services
    api-client.ts
    image-url.ts
  hooks
    useData.ts
    useGames.ts
    useGenres.ts
  App.tsx
  main.tsx
  index.html    
    
 

-----------------
useData.ts:-
-----------------
import { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { CanceledError } from "axios";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
  interface FetchResponse<T> {
    count: number;
    results: T[];
  }

const useData = <T>(endpoint:string)=>{
    const [data, setData] = useState<T[]>([]);
  const [error, setError] = useState("");
  const [isLoading,setLoading] = useState(false);
  useEffect(() => {
    const controller = new AbortController();
    setLoading(true);
    apiClient
      .get<FetchResponse<T>>(endpoint,{signal:controller.signal})
      .then((res) => {
        setData(res.data.results);
        setLoading(false)
      })
      .catch((err) =>{
          if(err instanceof CanceledError) return;
          setError(err.message);
          setLoading(false)
        });
      return ()=>controller.abort();
  },[]);
  return {data,error,isLoading};
}

export default useData;

------------------
GenreList.tsx:-
------------------
import useGenres from "../hooks/useGenres";

const GenreList = () => {
  const { data } = useGenres();
  return (
    <ul>
      {data.map((genre) => (
        <li key={genre.id}>{genre.name}</li>
      ))}
    </ul>
  );
};

export default GenreList;

--------------
useGenres.tx
--------------
import useData from "./useData";

export interface Genre{
    id:number;
    name:string;
}



const useGenres = ()=> useData<Genre>('/genres');

export default useGenres;

-----------------
useGames.ts:-
-----------------
import useData from "./useData";

export interface Platform{
  id:number;
  name:string;
  slug:string;
}

export interface Game {
    id: number;
    name: string;
    background_image:string;
    parent_platforms:{platform:Platform}[];
    metacritic:number;
  }
  
 

const useGames = ()=>useData<Game>('/games');
export default useGames;

-------------------
GameGrid.tsx:-
-------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { SimpleGrid, Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";
import GameCards from "./GameCard";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";
import GameCardContainer from "./GameCardContainer";

const GameGrid = () => {
  const { data, error, isLoading } = useGames();
  const Skeletons = [1, 2, 3, 4, 5, 6];
  return (
    <>
      {error && <Text>{error}</Text>}
      <SimpleGrid
        columns={{ sm: 1, md: 2, lg: 3, xl: 5 }}
        padding="10px"
        spacing={10}
      >
        {isLoading &&
          Skeletons.map((skeleton) => (
            <GameCardContainer>
              <GameCardSkeleton key={skeleton} />
            </GameCardContainer>
          ))}
        {data.map((game) => (
          <GameCardContainer>
            <GameCard key={game.id} game={game} />
          </GameCardContainer>
        ))}
      </SimpleGrid>
    </>
  );import { Badge } from "@chakra-ui/react";
import React from "react";

interface Props {
  score: number;
}

const CriticScore = ({ score }: Props) => {
  let color = score > 75 ? "green" : score > 60 ? "yello" : "";
  return (
    <Badge colorScheme={color} fontSize="14px" paddingX={2} borderRadius="4px">
      {score}
    </Badge>
  );
};

export default CriticScore;

};

export default GameGrid;



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


***************************************************Displaying The Genres****************************************

List component of Chakra displays list without bullet-points.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START
---------------
useGenres.ts
---------------
import useData from "./useData";

export interface Genre{
    id:number;
    name:string;
    image_background:string;			//New Line 
}



const useGenres = ()=> useData<Genre>('/genres');

export default useGenres;

-------------------
GenreList.tsx
-------------------
import { HStack, Image, List, ListItem, Text } from "@chakra-ui/react";
import useGenres from "../hooks/useGenres";
import getCroppedImageUrl from "../services/image-url";

const GenreList = () => {
  const { data } = useGenres();
  return (
    <List>						//Using Chakra UI List
      {data.map((genre) => (
        <ListItem key={genre.id} paddingY="5px">                    
          <HStack>
            <Image
              boxSize="32px"
              borderRadius={8}
              src={getCroppedImageUrl(genre.image_background)}
            />
            <Text fontSize="lg">{genre.name}</Text>
          </HStack>
        </ListItem>
      ))}
    </List>
  );
};

export default GenreList;

---------------
App.tsx
---------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
import GenreList from "./components/GenreList";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" paddingX={5}>
          <GenreList />
        </GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;

-----------------------------
You will see that your game cards are sticking with each other. (Which we have to solve)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

First of all we should fix the width of Aside panel---> 

-------------------
App.tsx-->
-------------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
import GenreList from "./components/GenreList";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
      templateColumns={{
        base: "1fr",
        lg: "200px 1fr",
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" paddingX={5}>
          <GenreList />
        </GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;

----------------------
You will see that the Width of aside panel is 200px and Main content will occupy the remaining width. But, Still the Game Cards are sticking with each other. Why is this happening? 
We had assigned width of 300px to Each Game Card, Aside panel is 200px. To total it becomes almost 1100px. But, our screen is 1024px. How to solve this---> 
>> Remove the fixed width that applied on these cards --> 
   And make width width="100%". But, even if you don't use this width, it will be 100% automatically. 
   
------------------------
GameCardContainer.tsx
------------------------
import { Box } from "@chakra-ui/react";
import React, { Children, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

const GameCardContainer = ({ children }: Props) => {
  return (
    <Box borderRadius={10} overflow={"hidden"}>
      {children}
    </Box>
  );
};

export default GameCardContainer;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>START

---------------------
useGenres.ts
---------------------
import useData from "./useData";

export interface Genre{
    id:number;
    name:string;
    image_background:string;			//New Line
}



const useGenres = ()=> useData<Genre>('/genres');

export default useGenres;

--------------------
GenreList.tsx
--------------------
import { HStack, Image, List, ListItem, Text } from "@chakra-ui/react";
import useGenres from "../hooks/useGenres";
import getCroppedImageUrl from "../services/image-url";

const GenreList = () => {
  const { data } = useGenres();
  return (
    <List> 						//Using ChakraUI List
      {data.map((genre) => (
        <ListItem key={genre.id} paddingY="5px">        //Using ChakraUI ListItem
          <HStack>
            <Image
              boxSize="32px"
              borderRadius={8}
              src={getCroppedImageUrl(genre.image_background)}       //New Line 
            />
            <Text fontSize="lg">{genre.name}</Text>
          </HStack>
        </ListItem>
      ))}
    </List>
  );
};

export default GenreList;

---------------
App.tsx
---------------
import { Grid, GridItem, Show } from "@chakra-ui/react";
import NavBar from "./components/NavBar";
import GameGrid from "./components/GameGrid";
import GenreList from "./components/GenreList";
function App() {
  return (
    <Grid
      templateAreas={{
        base: `"nav" "main"`,
        lg: '"nav nav" "aside main"', //Large-Screens wider than 1024 pixels
      }}
      templateColumns={{			//New
        base: "1fr",
        lg: "200px 1fr",
      }}
    >
      <GridItem area="nav">
        <NavBar />
      </GridItem>
      <Show above="lg">
        <GridItem area="aside" paddingX={5}>
          <GenreList />
        </GridItem>
      </Show>

      <GridItem area="main">
        <GameGrid />
      </GridItem>
    </Grid>
  );
}

export default App;

------------------------
GameCardContainer.tsx
------------------------
import { Box } from "@chakra-ui/react";
import React, { Children, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

const GameCardContainer = ({ children }: Props) => {
  return (
    <Box borderRadius={10} overflow={"hidden"}>    		//Modigy this line
      {children}
    </Box>
  );
};

export default GameCardContainer;

-------------------
GameGrid.tsx
-------------------
import React, { useEffect, useState } from "react";
import apiClient from "../services/api-client";
import { SimpleGrid, Text } from "@chakra-ui/react";
import useGames from "../hooks/useGames";
import GameCards from "./GameCard";
import GameCard from "./GameCard";
import GameCardSkeleton from "./GameCardSkeleton";
import GameCardContainer from "./GameCardContainer";

const GameGrid = () => {
  const { data, error, isLoading } = useGames();
  const Skeletons = [1, 2, 3, 4, 5, 6];
  return (
    <>
      {error && <Text>{error}</Text>}
      <SimpleGrid
        columns={{ sm: 1, md: 2, lg: 3, xl: 5 }}
        padding="10px"
        spacing={3}					//Modify this line
      >
        {isLoading &&
          Skeletons.map((skeleton) => (
            <GameCardContainer>
              <GameCardSkeleton key={skeleton} />
            </GameCardContainer>
          ))}
        {data.map((game) => (
          <GameCardContainer>
            <GameCard key={game.id} game={game} />
          </GameCardContainer>
        ))}
      </SimpleGrid>
    </>
  );
};

export default GameGrid;


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

*************************************************Showing a Spinner*****************************************

>>>>>>>>>>>>>>>>>>>>>>>>>>START
-----------------
GenreList.tsx
-----------------
import { HStack, Image, List, ListItem, Spinner, Text } from "@chakra-ui/react";
import useGenres from "../hooks/useGenres";
import getCroppedImageUrl from "../services/image-url";

const GenreList = () => {
  const { data, isLoading, error } = useGenres();

  if (error) return null;
  if (isLoading) return <Spinner />;
  return (
    <List>
      {data.map((genre) => (
        <ListItem key={genre.id} paddingY="5px">
          <HStack>
            <Image
              boxSize="32px"
              borderRadius={8}
              src={getCroppedImageUrl(genre.image_background)}
            />
            <Text fontSize="lg">{genre.name}</Text>
          </HStack>
        </ListItem>
      ))}
    </List>
  );
};

export default GenreList;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>END

*************************************************THE END*****************************************









